/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  7  
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     twoPhaseEulerFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         0.5;

deltaT          0.002;

writeControl    adjustable;

writeInterval   0.05;

purgeWrite      0;

writeFormat     ascii;

writePrecision  6;

writeCompression no;

timeFormat      general;

timePrecision   6;

runTimeModifiable yes;

adjustTimeStep  yes;

maxCo           1;

maxDeltaT       0.01;

libs
(
    "libfieldFunctionObjects.so"    // add only if it is not already listed
);

/*functions
{
    gasHoldup                       // folder name: postProcessing/gasHoldup/
    {
        type        volFieldValue;  // the functionObject class
        operation   volAverage;     // volume average
        //libs		(fieldFunctionsObjects);

        fields      (alpha.air);    // what to average

        writeControl timeStep;      // trigger by time‑step counting
        writeInterval 10;           // … every 50 solver steps
        timePrecision 6;            // nicer fixed‑point times
	writeFields   no;
        // region region0;          // omit if case has only one region
        //libs ("libfieldFunctionObjects.so"); // OPTIONAL duplicate safety
    }
    
    gasHoldupCube                      // folder name: postProcessing/gasHoldup/
    {
        type        volFieldValue;  // the functionObject class
        operation   volAverage;     // volume average
        //libs		(fieldFunctionsObjects);

        fields      (alpha.air);    // what to average
	zone        injectionzone1;
        writeControl timeStep;      // trigger by time‑step counting
        writeInterval 10;           // … every 50 solver steps
        timePrecision 6;            // nicer fixed‑point times
	writeFields   no;
        // region region0;          // omit if case has only one region
        //libs ("libfieldFunctionObjects.so"); // OPTIONAL duplicate safety
    }
}*/


functions
{
    /*───────────────────────────────────────────────────────────────────────*\
      1.  Four‑point probe:  α_air at the spargers
    \*───────────────────────────────────────────────────────────────────────*/
    spargerGasProbes
    {
        type            probes;
        libs            (sampling);

        /* ── How often to write probe data ────────────────────────────── */
        writeControl    timeStep;      // every solver step
        writeInterval   1;             // change to N for every N‑th step

        /* ── Where and what to sample ─────────────────────────────────── */
        interpolationScheme  cellPoint;   // robust for off‑cell centres
        probeLocations
        (
            (-0.02 -0.125 -0.02)   // Probe 1
            ( 0.00 -0.125 -0.02)   // Probe 2
            ( 0.02 -0.125 -0.02)   // Probe 3
            ( 0.00 -0.125  0.02)   // Probe 4
        );
        fields          (alpha.air);      // add U, p_rgh … if desired
    }

}

// ************************************************************************* //
